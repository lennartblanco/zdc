* in semantic validation pass, check if static arrays specified are over 16Mb and
 generate a compiler warning (as per D specifications, static arrays are not allowed to be over 16Mb)

* following (probably, check the specs, but both dmd and gdc accept it) correct D code is rejected with
compile errors by xdc:

int
func1(int irds)
{
  int x;

  if (irds) { x = 10; }

  return x;
}

void
func2(int i)
{
  int x = i;

  while (i)
  {
    writefln("i %s\n", i--);
  }
}

void main()
{
  int i;

  i = 10;
  writefln("func1(%d) = %s", i, func1(i));

  i = 2;
  writefln("func1(%d) = %s", i, func1(i));

  i = 0;
  writefln("func1(%d) = %s", i, func1(i));

  func2(2);
}

import std.stdio; 

* following code does not generate compile error:

int sum_stat(int first, int[5] s, int last)
{
    return s[0] + s[1] + s[2] - first - last;
}

int main()
{
  int[5] x;
  int t;
  
  return sum_stat(10, t, 20);
}

here is what DMD (v2) have to say about the code above:

$ dmd -c err.d 
err.d(11): Error: function err.sum_stat (int first, int[5u] s, int last) is not callable using argument types (int,int,int)
err.d(11): Error: cannot implicitly convert expression (t) of type int to int[5u]

* add a check that non-void functions have a return statment, and throw compile error otherwise

* types not validated in function declarations

For example, the code:

void* func1(bar);
hej func2();

Does not generate any compile errors. Here are DMD error messages:

wee.d(1): Error: identifier 'bar' is not defined
wee.d(1): Error: bar is used as a type
wee.d(2): Error: identifier 'hej' is not defined
wee.d(2): Error: hej is used as a type

* the code below fails an assertion

int foo();

void main()
{
  foo();
}

$ ./xdc tst.d
xdc: ir_symbol.c:104: ir_symbol_get_parent_module: Assertion `(((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) ((self->parent_module)); GType __t = (ir_module_get_type()); gboolean __r; if (__inst && __inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))))' failed.

* the code below fails an assertion

void foo(int arg)
{

}

void main()
{
  return foo(2);
}

$ xdc meep.d
xdc: types.c:211: implicit_conv_to_basic_type: Assertion `0' failed.
Aborted

* the code below fails an assertion

void foo(char arg)
{

}

void main()
{
  int x;
  foo(x);
}

$ ./xdc meep.d
xdc: types.c:165: implicit_conv_to_char: Assertion `0' failed.
