%prelude
{
#include <stdlib.h>
#include <stdio.h>

#include "yystype_def.h"
#include "dt_auto.h"
#include "dt_void.h"
#include "dt_basic.h"
#include "dt_pointer.h"
#include "dt_name.h"
#include "dt_static_array.h"
#include "ast_alias.h"
#include "ast_return.h"
#include "ast_conditional.h"
#include "ast_binary_operation.h"
#include "ast_unary_operation.h"
#include "ast_int_constant.h"
#include "ast_uint_constant.h"
#include "ast_bool_constant.h"
#include "ast_char_constant.h"
#include "ast_string_literal.h"
#include "ast_array_cell_ref.h"
#include "ast_array_slice_ref.h"
#include "ast_function_decl.h"
#include "ast_assignment.h"
#include "ast_cast.h"
#include "ast_postfix_exp.h"
#include "ast_struct.h"
#include "ast_enum.h"
#include "ast_ptr_dref.h"
#include "ast_address_of.h"
#include "ast_function_call.h"
#include "ast_if_else.h"
#include "ast_array_literal.h"
#include "ast_while.h"
#include "ast_for.h"
#include "ast_foreach.h"
#include "ast_foreach_range.h"
#include "ast_break.h"
#include "ast_import.h"

#include <assert.h>

AstModule *module;
}

%token TOK_DOTDOT,
       TOK_INT_CONST, TOK_UINT_CONST, TOK_CHAR_CONST, TOK_STRING_LITERAL,
       TOK_IDENT, TOK_TRUE, TOK_FALSE,
       TOK_ENUM, TOK_STRUCT, TOK_IF, TOK_ELSE, TOK_FOREACH, TOK_WHILE, TOK_FOR,
       TOK_BREAK, TOK_RETURN, TOK_CAST, TOK_EXTERN, TOK_PUBLIC, TOK_PRIVATE,
       TOK_REF, TOK_AUTO, TOK_VOID, TOK_INT, TOK_UINT, TOK_SHORT, TOK_USHORT,
       TOK_BYTE, TOK_UBYTE, TOK_CHAR, TOK_BOOL, TOK_ALIAS,
       TOK_THIS, TOK_IMMUTABLE, TOK_IMPORT, TOK_MODULE;

root :
    {
        module = mod.module = ast_module_new();
    }
    module_root<mod>
;

module_root<mod> :
    (
        module_declaration<package_names>
        {
            ast_module_set_package((*mod).module, package_names.list);
        }
    )?
    (
        import_declarations<imports>
        {
            ast_module_add_imports((*mod).module, imports.list);
        }
    |   declaration<decl>
        {
            ast_module_add_declaration((*mod).module, decl.decl);
        }
    )*
;

module_declaration<package_names> :
    TOK_MODULE module_name<fq_name> ';'
    {
        (*package_names).list = fq_name.list;
    }
;

declaration<decl> :
    attributes<decl> ':'
|   alias_declaration<decl>
|   enum_declaration<decl>
|   struct_declaration<decl>
|   func_definition<decl>
|   func_declaration<decl>
|   declaration_block<decl>
;

import_declarations<imports> :
    {
        (*imports).list = NULL;
        bool private = true;
    }
    ( TOK_PUBLIC
        {
            private = false;
        }
     | TOK_PRIVATE
        {
            private = true;
        }
    )?
    TOK_IMPORT module_name<fq_name>
    {
        (*imports).list =
            g_slist_prepend((*imports).list,
                            ast_import_new(private, fq_name.list, yypos));
    }
    ( ',' module_name<fq_name>
        {
            (*imports).list =
                g_slist_prepend((*imports).list,
                                ast_import_new(private, fq_name.list, yypos));
        }
    )*
    ';'
;

alias_declaration<alias> :
    TOK_ALIAS type<t> TOK_IDENT<name> ';'
    {
        (*alias).decl =
            AST_DECLARATION(ast_alias_new(t.data_type, name.text, yypos));
    }
;

enum_declaration<enum_decl> :
    {
        enum_tag.text = NULL;
        base_type.data_type = NULL;
    }
    TOK_ENUM ( TOK_IDENT<enum_tag> )?
             ( ':' type<base_type> )?
             enum_body<members>
    {
        (*enum_decl).decl =
             AST_DECLARATION(ast_enum_new(enum_tag.text,
                                          base_type.data_type,
                                          members.list,
                                          yypos));
    }
;

enum_body<members> :
    enum_members<members> ';'
|   '{' enum_members<members> '}'
;

enum_members<l> :
    {
        (*l).list = NULL;
    }
    enum_member<f> 
    {
        (*l).list = g_slist_prepend((*l).list, f.enum_member);
    }
    ( ',' enum_member<n> 
      {
          (*l).list = g_slist_prepend((*l).list, n.enum_member);
      }
    )*
    {
        (*l).list = g_slist_reverse((*l).list);
    }
;

enum_member<x> :
    TOK_IDENT<name>
    {
        (*x).enum_member = ast_enum_member_new(NULL, name.text, NULL);
    }
|   TOK_IDENT<name> '=' expression<init>
    {
        (*x).enum_member = ast_enum_member_new(NULL,
                                               name.text,
                                               init.expression);
    }
|   type<t> TOK_IDENT<name> '=' expression<init>
    {
        (*x).enum_member = ast_enum_member_new(t.data_type,
                                               name.text,
                                               init.expression);
    }
;

struct_declaration<struct_decl> :
    TOK_STRUCT TOK_IDENT<name>
    '{' struct_body_declarations<members, methods> '}'
    {
        (*struct_decl).decl =
            AST_DECLARATION(
                ast_struct_new(name.text, members.list, methods.list, yypos));
    }
;

struct_body_declarations<members, methods> :
    {
        (*members).list = NULL;
        (*methods).list = NULL;
    }
    (
        var_definitions<defs>
        {
            (*members).list = g_slist_concat((*members).list,
                                             defs.list);
        }
     |  func_definition<method>
        {
            (*methods).list = g_slist_prepend((*methods).list,
                                              method.function_def);
        }
    )*
;

declaration_block<block> :
    attributes<attrs>
        '{'
        {
            (*block).decl_block = ast_declaration_block_new(attrs.attrs);
        }
            ( declaration<decl>
            {
                ast_declaration_block_add_declaration((*block).decl_block,
                                                      decl.decl);
            }
            )*
        '}'
;

func_declaration<fdecl> :
    {
        attrs.attrs = NULL;
    }
    (attributes<attrs>)? type<t> TOK_IDENT<name> '(' func_params<args> ')' ';'
    {
        (*fdecl).function_decl = ast_function_decl_new(attrs.attrs,
                                                       t.data_type,
                                                       name.text,
                                                       args.list,
                                                       yypos);
    }
;

func_definition<fdef> :
    {
        attrs.attrs = NULL;
    }
    (attributes<attrs>)? type<t> TOK_IDENT<name>
                                    '(' func_params<args> ')' func_body<code>
    {
        (*fdef).function_def = ast_function_def_new(attrs.attrs,
                                                    t.data_type,
                                                    name.text,
                                                    args.list,
                                                    code.code_block,
                                                    yypos);
    }
;

attributes<attrs> :
    attribute<a>
    {
        (*attrs).attrs = ast_attributes_new(a.attr);
    }
        ( attribute<b>
        {
            ast_attributes_add_attribute((*attrs).attrs, b.attr);
        }
        )*
;

attribute<attr> :
    linkage_attribute<attr>
|   protection_attribute<attr>
;

linkage_attribute<ext> :
    {
       linkage.text = NULL;
    }
    TOK_EXTERN ( '(' TOK_IDENT<linkage> ')' )?
    {
        (*ext).attr = AST_ATTRIBUTE(ast_extern_new(linkage.text, yypos));
    }
;

protection_attribute<attr> :
    TOK_PUBLIC
    {
        (*attr).attr = AST_ATTRIBUTE(ast_protection_new(false, yypos));
    }
|   TOK_PRIVATE
    {
        (*attr).attr = AST_ATTRIBUTE(ast_protection_new(true, yypos));
    }
;

/**
 * Module's fully qualified name
 */
module_name<fq_name> :
    {
        (*fq_name).list = NULL;
    }
    ( TOK_IDENT<package> '.'
        {
            (*fq_name).list =
                g_slist_prepend((*fq_name).list, package.text);
        }
    )*
    TOK_IDENT<name>
    {
        (*fq_name).list = g_slist_prepend((*fq_name).list, name.text);
        (*fq_name).list = g_slist_reverse((*fq_name).list);
    }
;

func_params<params> :
    {
        (*params).list = NULL;
    }
    ( func_param<n>
        {
          (*params).list =
              g_slist_prepend((*params).list, n.variable_declaration);
        }
      ( ',' func_param<l>
          {
              (*params).list =
                  g_slist_append((*params).list, l.variable_declaration);
          }
      )*
    )?
;

func_body<code> :
    block_statment<code>
;

block_statment<code> :
    '{' '}'
    {
        (*code).code_block = ast_code_block_new();
    }
|
    {
        (*code).code_block = ast_code_block_new();
    }
   '{' statments_list<code> '}'
;

scope_statment<code_block> :
    non_empty_statment<stmt>
    {
        (*code_block).code_block = ast_code_block_new();

        if (stmt.statment != NULL)
        {
             ast_code_block_add_statment((*code_block).code_block,
                                         stmt.statment);
        }
    }
|   var_definitions<stmts>
    {
        (*code_block).code_block = ast_code_block_new();

        ast_code_block_add_statments((*code_block).code_block,
                                     stmts.list);
    }
|   block_statment<code_block>
;

statments_list<code> :
    statment<stmt>
    {
        if (stmt.statment != NULL)
        {
             ast_code_block_add_statment((*code).code_block,
                                         stmt.statment);
        }
    }
    ( statments_list<code> )?
|   var_definitions<stmts>
    {
        ast_code_block_add_statments((*code).code_block,
                                     stmts.list);
    }
    ( statments_list<code> )?
;

statment<stmt> :
    ';'
    {
        (*stmt).statment = NULL;
    }
|   non_empty_statment<stmt>
|   scope_block_statment<stmt>
;

non_empty_statment<stmt> :
    expression_statment<stmt>
|   if_else_block<stmt>
|   foreach_block<stmt>
|   foreach_range_statment<stmt>
|   for_block<stmt>
|   while_block<stmt>
|   break_statment<stmt>
|   return_stmt<stmt>
;

scope_block_statment<x> :
    block_statment<x>
;

expression_statment<stmt> :
    expression<stmt> ';'
;

type<x> :
    type<t> '[' TOK_INT_CONST<num> ']'
    {
        (*x).data_type =
            DT_DATA_TYPE(dt_static_array_new(t.data_type, num.integer, yypos));
    }
|   type<t> '[' ']'
    {
        (*x).data_type = DT_DATA_TYPE(dt_array_new(t.data_type));
    }
|   basic_type<x>
|   type<t> '*'
    {
        (*x).data_type = DT_DATA_TYPE(dt_pointer_new(t.data_type));
    }
|   TOK_AUTO
    {
        (*x).data_type = DT_DATA_TYPE(dt_auto_new());
    }
|   TOK_VOID
    {
        (*x).data_type = DT_DATA_TYPE(dt_void_new());
    }
|   TOK_IMMUTABLE type<t>
    {
        dt_data_type_set_immutable(t.data_type, true);
        (*x).data_type = t.data_type;
    }
|   TOK_IMMUTABLE '(' type<t> ')'
    {
        dt_data_type_set_immutable(t.data_type, true);
        (*x).data_type = t.data_type;
    }
|   TOK_IDENT<t>
    {
        (*x).data_type = DT_DATA_TYPE(dt_name_new(t.text, yypos));
    }
;

basic_type<x> :
    TOK_UINT
    {
        (*x).data_type = DT_DATA_TYPE(dt_basic_new(uint_type));
    }
|   TOK_INT
    {
        (*x).data_type = DT_DATA_TYPE(dt_basic_new(int_type));
    }
|   TOK_SHORT
    {
        (*x).data_type = DT_DATA_TYPE(dt_basic_new(short_type));
    }
|   TOK_USHORT
    {
        (*x).data_type = DT_DATA_TYPE(dt_basic_new(ushort_type));
    }
|   TOK_BYTE
    {
        (*x).data_type = DT_DATA_TYPE(dt_basic_new(byte_type));
    }
|   TOK_UBYTE
    {
        (*x).data_type = DT_DATA_TYPE(dt_basic_new(ubyte_type));
    }
|   TOK_CHAR
    {
        (*x).data_type = DT_DATA_TYPE(dt_basic_new(char_type));
    }
|   TOK_BOOL
    { 
        (*x).data_type = DT_DATA_TYPE(dt_basic_new(bool_type));
    }
;

if_else_block<x>:
    {
        (*x).if_else = ast_if_else_new();
    }
    if_statment<n>
    {
        ast_if_else_add_if_else_block((*x).if_else, n.if_block);
    }
    ( if_else_statment<m>
        {
            ast_if_else_add_if_else_block((*x).if_else, m.if_block);
        } 
    )*
    ( else_statment<l>
        {
            ast_if_else_set_else_block((*x).if_else, l.code_block);
        }
    )?
;

if_statment<x>:
    TOK_IF '(' expression<cond> ')' scope_statment<code>
    {
        (*x).if_block = ast_if_block_new(cond.expression, code.code_block);
    }
;

if_else_statment<x>:
    TOK_ELSE TOK_IF '(' expression<cond> ')' scope_statment<code>
    {
        (*x).if_block = ast_if_block_new(cond.expression, code.code_block);
    }
;

else_statment<code>:
    TOK_ELSE scope_statment<code>
;

foreach_block<x> :
    TOK_FOREACH '('
      {
          idx_var.variable_declaration = NULL;
          val_type.data_type = NULL;
          val_name.text = NULL;
      }
      ( foreach_type<idx_var> ',' )?
      ( type<val_type> )? TOK_IDENT<val_name> ';'
      (
        expression<aggregate>
      ) ')' scope_statment<code>
    {
        AstVariableDeclaration *value;

        /* 
         * build value variable declaration node if specified
         */
        if (val_type.data_type == NULL)
        {
            /* if not type is specified handle as auto type */
            val_type.data_type = DT_DATA_TYPE(dt_auto_new());
        }
        value = ast_variable_declaration_new(false,
                                             val_type.data_type,
                                             val_name.text,
                                             yypos);

        /* build foreach ast node */
        (*x).statment =
            AST_STATMENT(
                ast_foreach_new(idx_var.variable_declaration,
                                value,
                                aggregate.expression,
                                code.code_block,
                                yypos));
    }
;

foreach_range_statment<stmt> :
    TOK_FOREACH '(' foreach_type<idx_var> ';'
                    expression<lower_exp> TOK_DOTDOT
                    expression<upper_exp>
                ')'
                scope_statment<body>
    {
        (*stmt).statment =
            AST_STATMENT(
                ast_foreach_range_new(idx_var.variable_declaration,
                                      lower_exp.expression,
                                      upper_exp.expression,
                                      body.code_block));
    }
;

foreach_type<var> :
    {
        var_type.data_type = NULL;
    }
    ( type<var_type> )?  TOK_IDENT<var_name>
    {
        if (var_type.data_type == NULL)
        {
            /* if no type is specified handle as auto type */
            var_type.data_type = DT_DATA_TYPE(dt_auto_new());
        }
        (*var).variable_declaration =
            ast_variable_declaration_new(false,
                                         var_type.data_type,
                                         var_name.text,
                                         yypos);
    }
;

while_block<x> :
    TOK_WHILE '(' expression<exp> ')' scope_statment<code>
    {
        (*x).statment =
            AST_STATMENT(ast_while_new(exp.expression, code.code_block));
    }
;

for_block<x> :
    {
        test.expression = NULL;
        step.expression = NULL;
    }
    TOK_FOR '(' for_init<init>
                (expression<test>)? ';'
                (expression<step>)? ')'
            scope_statment<body>
    {
        (*x).statment =
            AST_STATMENT(ast_for_new(init.code_block,
                                     test.expression,
                                     step.expression,
                                     body.code_block));
    }
;

for_init<code> :
    ';'
    {
        (*code).code_block = ast_code_block_new();
    }
|   scope_statment<code>
;

break_statment<x> :
    TOK_BREAK
    {
        (*x).statment =
            AST_STATMENT(ast_break_new(yypos));
    }
;

return_stmt<x> :
    TOK_RETURN expression<n> ';'
    { 
       (*x).statment = AST_STATMENT(ast_return_new(n.expression, yypos));
    }
|   TOK_RETURN ';'
    {
       (*x).statment = AST_STATMENT(ast_return_new(NULL, yypos));
    }
;

func_call<n> :
    {
        y.list = NULL;
    }
    TOK_IDENT<x> '(' ( func_call_args<y> )? ')'
    { 
        (*n).statment =
            AST_STATMENT(ast_function_call_new(x.text, y.list, yypos));
        free(x.text);
    }
;

func_call_args<n> :
   expression<x>
   { 
       (*n).list = g_slist_append((*n).list, x.expression);
   }
|  expression<x>
   {
       (*n).list = g_slist_append((*n).list, x.expression);
       y = *n;
   }
   ',' func_call_args<y>
;

func_param<n> :
   {
       bool ref = false;
       name.text = NULL;
   }
   ( TOK_REF { ref = true; })? type<t> ( TOK_IDENT<name> )?
   {
       (*n).variable_declaration =
           ast_variable_declaration_new(ref, t.data_type, name.text, yypos);
   }
;

var_definitions<n> :
   { (*n).list = NULL; }
   type<t> def_init<name, e>
   {
       (*n).list =
           g_slist_append(
               (*n).list,
               ast_variable_definition_new(t.data_type,
                                           name.text,
                                           e.expression,
                                           yypos));
       free(name.text);
   }
   (',' def_init<name, e>
       {
           (*n).list =
               g_slist_append(
                   (*n).list,
                   ast_variable_definition_new(t.data_type,
                                               name.text,
                                               e.expression,
                                               yypos));
           free(name.text);
       }
   )* ';'
;

def_init<name, exp> :
   { (*exp).expression = NULL; }
   TOK_IDENT<name> ( '=' expression<exp> )?
;

expression<n> :
    assign_expression<n>
;

assign_expression<n> :
    conditional_expression<n>
|   conditional_expression<left> '=' assign_expression<right>
   {
       (*n).expression =
           AST_EXPRESSION(ast_assignment_new(left.expression,
                                             right.expression,
                                             yypos));
   }
;

conditional_expression<n> :
    oror_expression<n>
|   oror_expression<cond> '?'
        expression<true_exp> ':' conditional_expression<false_exp>
    {
        (*n).expression =
            AST_EXPRESSION(ast_conditional_new(cond.expression,
                                               true_exp.expression,
                                               false_exp.expression,
                                               yypos));
    }
;

oror_expression<n> :
    oror_expression<l> '|''|' andand_expression<r>
    {
        (*n).expression =
          AST_EXPRESSION(ast_binary_operation_new(op_or,
                                                  l.expression,
                                                  r.expression,
                                                  yypos));
    }
|   andand_expression<n>
;

andand_expression<n> :
    andand_expression<l> '&''&' eq_expression<r>
    {
        (*n).expression =
          AST_EXPRESSION(ast_binary_operation_new(op_and,
                                                  l.expression,
                                                  r.expression,
                                                  yypos));
    }
|   eq_expression<n>
;

eq_expression<n> :
    rel_expression<l> '=''=' rel_expression<r>
    {
        (*n).expression =
          AST_EXPRESSION(ast_binary_operation_new(op_equal,
                                                  l.expression,
                                                  r.expression,
                                                  yypos));
    }
|   rel_expression<l> '!''=' rel_expression<r>
    {
      (*n).expression =
          AST_EXPRESSION(ast_binary_operation_new(op_not_equal,
                                                  l.expression,
                                                  r.expression,
                                                  yypos));
    }
|   rel_expression<n>
;

rel_expression<n> :
    add_expression<l> '<' add_expression<r>
    {
        (*n).expression =
            AST_EXPRESSION(ast_binary_operation_new(op_less,
                                                    l.expression,
                                                    r.expression,
                                                    yypos));
    }
|   add_expression<l> '>' add_expression<r>
    {
        (*n).expression =
            AST_EXPRESSION(ast_binary_operation_new(op_greater,
                                                    l.expression,
                                                    r.expression,
                                                    yypos));
    }
|   add_expression<l> '<''=' add_expression<r>
    {
        (*n).expression =
            AST_EXPRESSION(ast_binary_operation_new(op_less_or_eq,
                                                    l.expression,
                                                    r.expression,
                                                    yypos));
    }
|   add_expression<l> '>''=' add_expression<r>
    {
        (*n).expression =
            AST_EXPRESSION(ast_binary_operation_new(op_greater_or_eq,
                                                    l.expression,
                                                    r.expression,
                                                    yypos));
    }
|   add_expression<n>
;

add_expression<n> :
    add_expression<l> '+' mult_expression<r>
    {
        (*n).expression =
            AST_EXPRESSION(ast_binary_operation_new(op_plus,
                                                    l.expression,
                                                    r.expression,
                                                    yypos));
    }
|   add_expression<l> '-' mult_expression<r>
    {
        (*n).expression =
            AST_EXPRESSION(ast_binary_operation_new(op_minus,
                                                    l.expression,
                                                    r.expression,
                                                    yypos));
    }
|   mult_expression<n>
;

mult_expression<n> :
    mult_expression<l> '*' unary_expression<r>
    {
        (*n).expression =
            AST_EXPRESSION(ast_binary_operation_new(op_mult,
                                                    l.expression,
                                                    r.expression,
                                                    yypos));
    }
|   mult_expression<l> '/' unary_expression<r>
    {
        (*n).expression =
            AST_EXPRESSION(ast_binary_operation_new(op_division,
                                                    l.expression,
                                                    r.expression,
                                                    yypos));
    }
|   mult_expression<l> '%' unary_expression<r>
    {
        (*n).expression =
            AST_EXPRESSION(ast_binary_operation_new(op_modulo,
                                                    l.expression,
                                                    r.expression,
                                                    yypos));
    }
|   unary_expression<n>
;

unary_expression<n> :
   '!' unary_expression<x>
    {
        (*n).expression =
            AST_EXPRESSION(ast_unary_operation_new(op_bool_neg,
                                                   x.expression,
                                                   yypos));
    }
|   '-' unary_expression<x>
    {
        (*n).expression =
            AST_EXPRESSION(ast_unary_operation_new(op_arithm_neg,
                                                   x.expression,
                                                   yypos));
    }
|   '+' '+' unary_expression<x>
    {
        (*n).expression =
            AST_EXPRESSION(ast_unary_operation_new(op_pre_inc,
                                                   x.expression,
                                                   yypos));
    }
|   '-' '-' unary_expression<x>
    {
        (*n).expression =
            AST_EXPRESSION(ast_unary_operation_new(op_pre_dec,
                                                   x.expression,
                                                   yypos));
    }
|   '*' unary_expression<x>
    {
        (*n).expression =
            AST_EXPRESSION(ast_ptr_dref_new(x.expression, yypos));
    }
|   '&' unary_expression<x>
    {
        (*n).expression =
            AST_EXPRESSION(ast_address_of_new(x.expression, yypos));
    }
|   TOK_CAST '(' type<t> ')' unary_expression<exp>
    {
        (*n).expression =
            AST_EXPRESSION(ast_cast_new(t.data_type, exp.expression, yypos));
    }
|   postfix_expression<n>
;


postfix_expression<n> :
    postfix_expression<left> '.' ident<right>
    {
        (*n).expression =
            AST_EXPRESSION(ast_postfix_exp_new(left.expression,
                                               right.expression,
                                               yypos));
    }
|   postfix_expression<exp> '.' func_call<method>
    {
        (*n).expression =
            AST_EXPRESSION(ast_postfix_exp_new(exp.expression,
                                               method.expression,
                                               yypos));
    }
|   postfix_expression<exp> '+' '+'
    {
        (*n).expression =
            AST_EXPRESSION(ast_unary_operation_new(op_post_inc,
                                                   exp.expression,
                                                   yypos));
    }
|   postfix_expression<exp> '-' '-'
    {
        (*n).expression =
            AST_EXPRESSION(ast_unary_operation_new(op_post_dec,
                                                   exp.expression,
                                                   yypos));
    }
|   primary<n>
;

primary<n> :
    TOK_INT_CONST<x>
    {
        (*n).expression =
            AST_EXPRESSION(ast_int_constant_new(x.integer, yypos));
    }
|   '-' TOK_INT_CONST<x>
    {
        (*n).expression =
            AST_EXPRESSION(ast_int_constant_new(-x.integer, yypos));
    }
|   TOK_UINT_CONST<x>
    {
        (*n).expression =
            AST_EXPRESSION(ast_uint_constant_new(x.integer, yypos));
    }
|   TOK_CHAR_CONST<x>
    {
        (*n).expression =
            AST_EXPRESSION(ast_char_constant_new(x.character, yypos));
    }
|   TOK_TRUE
    {
        (*n).expression =
            AST_EXPRESSION(ast_bool_constant_new(true, yypos));
    }
|   TOK_FALSE
    {
        (*n).expression =
            AST_EXPRESSION(ast_bool_constant_new(false, yypos));
    }
|   ident<n>
|   TOK_THIS
    {
        (*n).expression =
            AST_EXPRESSION(ast_ident_new("this", yypos));
    }
|   func_call<n>
|   '(' expression<n> ')'
|   TOK_IDENT<name> '[' expression<i> ']'
    {
        (*n).expression =
            AST_EXPRESSION(ast_array_cell_ref_new(name.text,
                                                  i.expression,
                                                  yypos));
        free(name.text);
    }
|   array_literal<n>
|   array_slice<n>
|   TOK_STRING_LITERAL<x>
    {
        (*n).expression =
            AST_EXPRESSION(ast_string_literal_new(x.text,
                                                  yypos));
    }
;

ident<i> :
    TOK_IDENT<name>
    {
        (*i).expression =
            AST_EXPRESSION(ast_ident_new(name.text, yypos));
    }
;

array_slice<n> :
    postfix_expression<array>
    {
        start.expression = NULL;
        end.expression = NULL;
    }
    '[' (expression<start> TOK_DOTDOT expression<end>)? ']'
    {
        (*n).expression =
            AST_EXPRESSION(ast_array_slice_ref_new(array.expression,
                                                   start.expression,
                                                   end.expression,
                                                   yypos));
    }
;

array_literal<n> :
    {
        (*n).expression = AST_EXPRESSION(ast_array_literal_new(yypos));
    }
    '['
    expression<first>
    {
        ast_array_literal_add_value(AST_ARRAY_LITERAL((*n).expression),
                                    first.expression);
    } 
    (',' expression<nth>
    {
        ast_array_literal_add_value(AST_ARRAY_LITERAL((*n).expression),
                                    nth.expression);
    }
    )*
    ']'
;
