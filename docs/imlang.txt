Intermediate language
=====================

This document describes the intermediate language used in XDC compiler. The front-end converts the source code into an intermediate representation, which is then passed to the assembly generating back-end (x86 or ARM). Each function's body is expressed with assembly-like operations from the intermediate language described below.

Data types
----------

Variables and constants are typed, following types are used:

 8-bit value        8b
 16-bit value      16b
 32-bit value      32b
 stack blob       blob
 pointer           ptr

Operations
----------

cast <src> => <target>

copy <source> => <target>
 copy value from <source> to <target>
  - all operands are of same type
  - constants are not allowed for <target>

mset <source>, <num> => <target>
 fill first <num> fields of <target> with <source> value. the size of the
 write operation is derived from the type of <source>
  - <target> must be a variable of blob or ptr type

add <left>, <right> => <res>
 addition
  - all operands are of same type
  - constants are not allowed for <res>

sub left, right => res
 subtraction
  - all operands are of same type
  - constants are not allowed for <res>

smult left, right => res
umult left, right => res
 signed/unsigned multiplication
  - all operands are of same type
  - constants are not allowed for <res>
  - left and right can not be constants at the same time

sdiv left, right => res
udiv left, right => res
  signed/unsigned division
   - all operands are of same type
   - constants are not allowed for <res>
   - left and right can not be constants at the same time

smod left, right => res
umod left, right => res
  signed/unsigned modulo (%)
   - all operands are of same type
   - constants are not allowed for <res>
   - left and right can not be constants at the same time

equal left, right => res
  signed/unsigned equal comparison, res = (left == right)
   - res must be 8b variable
   - left and right must be of same data type

nequal left, right => res
  signed/unsigned not equal comparison, res = (left != right)
   - res must be 8b variable
   - left and right must be of same data type

sless left, right => res
uless left, right => res
  signed/unsigned less then comparison, res = (left < right)
   - sless denotes signed operation, uless unsigned
   - res must be 8b variable
   - left and right must be of same data type

sgreater left, right => res
ugreater left, right => res
  signed/unsigned greater that comparison, res = (left > right)
   - sgreater denotes signed operation, ugreater unsigned
   - res must be 8b variable
   - left and right must be of same data type

slesseq left, right => res
ulesseq left, right => res
  signed/unsigned less or equal comparison, res = (left <= right)
   - slesseq denotes signed operation, ulesseq unsigned
   - res must be 8b variable
   - left and right must be of same data type

sgreatereq left, right => res
ugreatereq left, right => res
  signed/unsigned greater or equal comparison, res = (left >= right)
   - sgreatereq denotes signed operation, ugreatereq unsigned
   - res must be 8b variable
   - left and right must be of same data type

and left, right => res
  bitwise and between left and right, store the result in res
   - left, right and res must be of same type
   - either left or right must be a variable
     (and between constants not supported)
   - res must be a variable

or left, right => res
  bitwise or between left and right, store the result in res
   - left, right and res must be of same type
   - either left or right must be a variable
     (or between constants not supported)
   - res must be a variable

ineg value => res
 signed arithmetic negation of value
  - non of the operans can be constants

bneg value => res
 logical negation
  - non of the operans can be constants

return [value]
  return from function
   - if value operand specified, return with value
   - if value operand is not specified, void return

jmp label
  unconditional jump to specified label

jmpneq left, right, label
  jump to label if left != right

jmpuless left, right, label
  jump to label if left < right (unsigned comparison)

call function_name, (arg0, arg1, ..., argN) [ => res ]
 call a function
   - if no res variable is specified, then this is a call to void function

call_c function_name, (arg0, arg1, ..., argN) [ => res ]
 call a function, use calling convension (extern(C) linkage)
    - if no res variable is specified, then this is a call to void function

get <addr>[+<offset>] => <dest>
  get value at memory soecified by <addr> + <offset> and store it in <dest>.
  offset is optional, and if not specified 0 is assumed. the size of the read
  operation is derived from the type of <dest>
   - <addr> must be a pointer variable
   - <offset> must be contant of variable of 32b,
       it's value will be evaluated as unsigned integer
   - <dest> must be a variable

set <src> => <addr>[+<offset>]
  write <src> value to memory address specified by <addr> + <offset>. offset is
  optional, and if not specified 0 is assumed. the size of the write operation
  is derived from the type of <src>
    - <addr> must be a pointer variable
    - <offset> must be contant of variable of 32b,
        it's value will be evaluated as unsigned integer

getaddr blob => addr
  get the address of the blob variable and store it in a pointer variable
   - blob is a variable of blob type
   - add is a variable of pointer type

setelm src => dest(index*size)
  set array element value. write src to an dest offset, specified with index*size.
   - src must be a constant or variable of 8b, 16b, 32b or ptr type.
   - dest must be a variable of blob or ptr type
   - index must be a constant or variable
   - size must be a constant

getelm src(index*size) => dest
  get array element value. write value at src offset, specified with index*size,
  to dest
   - src must be a variable of blob or ptr type
   - dest must be a variable of 8b, 16b, 32b or ptr type.
   - index must be a constant or variable
   - size must be a constant

following functions are assumed to be present in the runtime library:

  void *GC_malloc(int size) - allocated memory on garbage collected heap
  memcpy                    - copy memory, see memcpy(3)

  Call to these functions, with extern (C) linkage, will be generated by the
  fron-end.