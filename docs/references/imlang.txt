Intermediate language
=====================

This document describes the intermediate language used in XDC compiler. The front-end converts the source code into an intermediate representation, which is then passed to the assembly generating back-end (x86 or ARM). Each function's body is expressed with assembly-like operations from the intermediate language described below.

Data types
----------

Variables and constants are typed, follwing types are used:

 8-bit value        8b
 16-bit value      16b
 32-bit value      32b
 pointer           ptr
 array handle      arh
 frame offset      fof

Operations
----------

copy <source> => <target>

 copy value from <source> to <target>
  - all operands are of same type
  - constants are not allowed for <target>

add <left>, <right> => <res>

 addition
  - all operands are of same type
  - constants are not allwed for <res>

sub left, right => res

 substraction

imult left, right => res
 signed muliplication

idiv left, right => res
 signed division

usub left, right => res

umult left, right => res

udiv left, right => res

iequal left, right => res
  res = (left == right)

inoteq left, right => res

  res = (left != right)

igreater left, right => res
   res = (left > right)

iless left, right => res
   res = (left < right)

iless_or_eq left, right => res
  res = (left <= right)

igreater_or_eq left, right => res
  res = (left >= right)

ineg value => res
 signed arithmetic negation of value
  - non of the operans can be constants

bneg value => res
 logical negation
  - non of the operans can be constants

return [value]
  return from function
   - if value operand specified, return with value
   - if value operand is not specified, void return

jump label
  unconditional jump

jump_true condition, label
  jump to label if condition is true

jump_false condition, label
  jump to label if condition is false

call function_name, (arg0, arg1, ..., argN) [ => res ]
 call a function
   - if no res variable is specified, then this is a call to void function

call_c function_name, (arg0, arg1, ..., argN) [ => res ]
 call a function, use calling convension (extern(C) linkage)
    - if no res variable is specified, then this is a call to void function

memcpy src, length => dest
  copy memory <length> bytes from <src> to <dest>.
   - src is data section label or pointer
   - length is variable or constant of 32b type
   - dest is pointer, frame offset or array handle

get_cell array, index => res
  store array cell array[index] value in <res>
  - array is an array handle or frame offset
  - index is variable or constant of 32b type
  - res must be a variable

set_cell val => array, index
  set array cell array[index] to val
  - val is a variable or constant
  - array is an array handle or frame offset
  - index is a variable or constant of 32b type
 
